export declare const baseGenerator: {
    ArrayExpression: (node: any, state: any) => void;
    ArrayPattern: any;
    ArrowFunctionExpression(node: any, state: any): void;
    AssignmentExpression(node: any, state: any): void;
    AssignmentPattern(node: any, state: any): void;
    AwaitExpression(node: any, state: any): void;
    BinaryExpression: (node: any, state: any) => void;
    BlockStatement: (node: any, state: any) => void;
    BreakStatement(node: any, state: any): void;
    CallExpression(node: any, state: any): void;
    ClassBody: any;
    ClassDeclaration(node: any, state: any): void;
    ClassExpression(node: any, state: any): void;
    ConditionalExpression(node: any, state: any): void;
    ContinueStatement(node: any, state: any): void;
    DebuggerStatement(node: any, state: any): void;
    DoWhileStatement(node: any, state: any): void;
    EmptyStatement(node: any, state: any): void;
    ExportAllDeclaration(node: any, state: any): void;
    ExportDefaultDeclaration(node: any, state: any): void;
    ExportNamedDeclaration(node: any, state: any): void;
    ExpressionStatement(node: any, state: any): void;
    ForInStatement: (node: any, state: any) => void;
    ForOfStatement: any;
    ForStatement(node: any, state: any): void;
    FunctionDeclaration: (node: any, state: any) => void;
    FunctionExpression: any;
    Identifier(node: any, state: any): void;
    IfStatement(node: any, state: any): void;
    ImportDeclaration(node: any, state: any): void;
    LabeledStatement(node: any, state: any): void;
    Literal(node: any, state: any): void;
    LogicalExpression: any;
    MemberExpression(node: any, state: any): void;
    MetaProperty(node: any, state: any): void;
    MethodDefinition(node: any, state: any): void;
    NewExpression(node: any, state: any): void;
    ObjectExpression(node: any, state: any): void;
    ObjectPattern(node: any, state: any): void;
    Program(node: any, state: any): void;
    Property(node: any, state: any): void;
    RegExpLiteral(node: any, state: any): void;
    RestElement: (node: any, state: any) => void;
    ReturnStatement(node: any, state: any): void;
    SequenceExpression(node: any, state: any): void;
    SpreadElement: any;
    Super(node: any, state: any): void;
    SwitchStatement(node: any, state: any): void;
    TaggedTemplateExpression(node: any, state: any): void;
    TemplateLiteral(node: any, state: any): void;
    ThisExpression(node: any, state: any): void;
    ThrowStatement(node: any, state: any): void;
    TryStatement(node: any, state: any): void;
    UnaryExpression(node: any, state: any): void;
    UpdateExpression(node: any, state: any): void;
    VariableDeclaration(node: any, state: any): void;
    VariableDeclarator(node: any, state: any): void;
    WhileStatement(node: any, state: any): void;
    WithStatement(node: any, state: any): void;
    YieldExpression(node: any, state: any): void;
};
export declare function generate(node: any, options: any): any;
