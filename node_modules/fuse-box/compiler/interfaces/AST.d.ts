export interface ASTNode {
    raw?: string;
    type: keyof typeof ASTType;
    $assign_pattern?: boolean;
    $fuse_classInitializers?: Array<ASTNode>;
    $fuse_class_declaration_visited?: boolean;
    $fuse_decoratorForClassIdentifier?: string;
    $fuse_decoratorsCaptured?: boolean;
    $fuse_decoratorsProcessed?: boolean;
    $fuse_exports?: boolean;
    $fuse_visited?: boolean;
    $transpiled?: boolean;
    alternate?: ASTNode;
    base?: ASTNode;
    chain?: ASTNode;
    consequent?: ASTNode;
    decorators?: Array<ASTNode>;
    definite?: boolean;
    elementTypes?: Array<ASTNode>;
    elements?: Array<ASTNode>;
    exportKind?: string;
    expressions?: Array<ASTNode>;
    importKind?: string;
    imported?: ASTNode;
    initializer?: ASTNode;
    literal?: ASTNode;
    loc?: {
        end: {
            column: number;
            line: number;
        };
        start: {
            column: number;
            line: number;
        };
    };
    members?: Array<ASTNode>;
    method?: boolean;
    moduleReference?: ASTNode;
    optional?: boolean;
    prefix?: boolean;
    returnType?: ASTNode;
    shorthand?: boolean;
    source?: ASTNode;
    sourceType?: string;
    specifiers?: Array<ASTNode>;
    test?: ASTNode;
    typeAnnotation?: ASTNode;
    typeName?: ASTNode;
    JSXElement?: ASTNode;
    abstract?: boolean;
    accessibility?: string;
    argument?: ASTNode;
    arguments?: Array<ASTNode>;
    async?: boolean;
    attributes?: Array<ASTNode>;
    body?: ASTNode | Array<ASTNode>;
    callee?: ASTNode;
    children?: Array<ASTNode>;
    closingElement?: ASTNode;
    computed?: boolean;
    declaration?: ASTNode;
    declarations?: Array<ASTNode>;
    declare?: boolean;
    exported?: ASTNode;
    expression?: any;
    generator?: boolean;
    id?: ASTNode;
    implements?: Array<ASTNode>;
    init?: null | ASTNode;
    key?: ASTNode;
    kind?: string;
    left?: ASTNode;
    local?: ASTNode;
    name?: any;
    object?: ASTNode;
    openingElement?: ASTNode;
    operator?: string;
    param?: ASTNode;
    parameter?: ASTNode;
    params?: Array<ASTNode>;
    properties?: Array<ASTNode>;
    property?: ASTNode;
    quasi?: ASTNode;
    quasis?: Array<ASTNode>;
    right?: ASTNode;
    static?: boolean;
    superClass?: ASTNode;
    tag?: ASTNode;
    tail?: ASTNode;
    value?: any;
}
export declare const ASTType: {
    EnumDeclaration: string;
    EnumMember: string;
    ParameterProperty: string;
    StringKeyword: string;
    TypeAnnotation: string;
    AbstractClassProperty: string;
    AbstractMethodDefinition: string;
    AsExpression: string;
    DeclareFunction: string;
    DeclareKeyword: string;
    InterfaceDeclaration: string;
    NonNullExpression: string;
    TypeAliasDeclaration: string;
    TypeAssertion: string;
    ArrayExpression: string;
    ArrayPattern: string;
    ArrowFunctionExpression: string;
    AssignmentExpression: string;
    AssignmentPattern: string;
    AwaitExpression: string;
    BigIntLiteral: string;
    BinaryExpression: string;
    Block: string;
    BlockStatement: string;
    BreakStatement: string;
    CallExpression: string;
    CatchClause: string;
    ChainExpression: string;
    ClassBody: string;
    ClassDeclaration: string;
    ClassExpression: string;
    ClassProperty: string;
    ConditionalExpression: string;
    ContinueStatement: string;
    DebuggerStatement: string;
    Decorator: string;
    DoWhileStatement: string;
    EmptyStatement: string;
    ExportAllDeclaration: string;
    ExportDefaultDeclaration: string;
    ExportNamedDeclaration: string;
    ExportSpecifier: string;
    ExpressionStatement: string;
    ForInStatement: string;
    ForOfStatement: string;
    ForStatement: string;
    FunctionDeclaration: string;
    FunctionExpression: string;
    HTMLClose: string;
    HTMLOpen: string;
    Identifier: string;
    IfStatement: string;
    Import: string;
    ImportDeclaration: string;
    ImportDefaultSpecifier: string;
    ImportNamespaceSpecifier: string;
    ImportSpecifier: string;
    JSXAttribute: string;
    JSXClosingElement: string;
    JSXClosingFragment: string;
    JSXElement: string;
    JSXEmptyExpression: string;
    JSXExpressionContainer: string;
    JSXFragment: string;
    JSXIdentifier: string;
    JSXMemberExpression: string;
    JSXOpeningElement: string;
    JSXOpeningFragment: string;
    JSXSpreadAttribute: string;
    JSXSpreadChild: string;
    JSXText: string;
    LabeledStatement: string;
    Line: string;
    Literal: string;
    LogicalExpression: string;
    MemberExpression: string;
    MetaProperty: string;
    MethodDefinition: string;
    NewExpression: string;
    ObjectExpression: string;
    ObjectPattern: string;
    OptionalCallExpression: string;
    OptionalMemberExpression: string;
    Program: string;
    Property: string;
    RestElement: string;
    ReturnStatement: string;
    SequenceExpression: string;
    SpreadElement: string;
    Super: string;
    SwitchCase: string;
    SwitchStatement: string;
    TaggedTemplateExpression: string;
    TemplateElement: string;
    TemplateLiteral: string;
    ThisExpression: string;
    ThrowStatement: string;
    TryStatement: string;
    module: string;
    script: string;
    AbstractKeyword: string;
    AnyKeyword: string;
    ArrayType: string;
    AsyncKeyword: string;
    BigIntKeyword: string;
    BooleanKeyword: string;
    CallSignatureDeclaration: string;
    ClassImplements: string;
    ConditionalType: string;
    ConstructSignatureDeclaration: string;
    ConstructorType: string;
    EmptyBodyFunctionExpression: string;
    ExportAssignment: string;
    ExportKeyword: string;
    ExternalModuleReference: string;
    FunctionType: string;
    ImportEqualsDeclaration: string;
    ImportExpression: string;
    ImportType: string;
    IndexSignature: string;
    IndexedAccessType: string;
    InferType: string;
    InterfaceBody: string;
    InterfaceHeritage: string;
    IntersectionType: string;
    LiteralType: string;
    MappedType: string;
    MethodSignature: string;
    ModuleBlock: string;
    ModuleDeclaration: string;
    NamespaceExportDeclaration: string;
    NeverKeyword: string;
    NullKeyword: string;
    NumberKeyword: string;
    ObjectKeyword: string;
    OptionalType: string;
    ParenthesizedType: string;
    PrivateKeyword: string;
    PropertySignature: string;
    ProtectedKeyword: string;
    PublicKeyword: string;
    QualifiedName: string;
    ReadonlyKeyword: string;
    RestType: string;
    StaticKeyword: string;
    SymbolKeyword: string;
    ThisType: string;
    TupleType: string;
    JSDocNullableType: string;
    JSDocUnknownType: string;
    TypeLiteral: string;
    TypeOperator: string;
    TypeParameter: string;
    TypeParameterDeclaration: string;
    TypeParameterInstantiation: string;
    TypePredicate: string;
    TypeQuery: string;
    TypeReference: string;
    UnaryExpression: string;
    UndefinedKeyword: string;
    UnionType: string;
    UnknownKeyword: string;
    UpdateExpression: string;
    VariableDeclaration: string;
    VariableDeclarator: string;
    VoidKeyword: string;
    WhileStatement: string;
    WithStatement: string;
    YieldExpression: string;
};
