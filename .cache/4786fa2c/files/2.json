{"contents":"exports.__esModule = true;\nconst {SocketClient} = __fusereq(3);\nfunction log(text) {\n  console.info(`%c${text}`, 'color: #237abe');\n}\nconst STYLESHEET_EXTENSIONS = ['.css', '.scss', '.sass', '.less', '.styl'];\nfunction gatherSummary() {\n  const modules = [];\n  for (const id in __fuse.modules) {\n    modules.push(parseInt(id));\n  }\n  return {\n    modules\n  };\n}\nfunction createHMRHelper(payload) {\n  const {updates} = payload;\n  let isStylesheeetUpdate = true;\n  for (const item of updates) {\n    const file = item.path;\n    const s = file.match(/(\\.\\w+)$/i);\n    const extension = s[1];\n    if (!STYLESHEET_EXTENSIONS.includes(extension)) {\n      isStylesheeetUpdate = false;\n    }\n  }\n  return {\n    isStylesheeetUpdate,\n    callEntries: () => {\n      const appEntries = [1];\n      for (const entryId of appEntries) {\n        __fuse.r(entryId);\n      }\n    },\n    callModules: modules => {\n      for (const item of modules) __fuse.r(item.id);\n    },\n    flushAll: () => {\n      __fuse.c = {};\n    },\n    flushModules: modules => {\n      for (const item of modules) {\n        __fuse.c[item.id] = undefined;\n      }\n    },\n    updateModules: () => {\n      for (const update of updates) {\n        new Function(update.content)();\n      }\n    }\n  };\n}\nexports.connect = opts => {\n  let client = new SocketClient(opts);\n  client.connect();\n  client.on('get-summary', data => {\n    const {id} = data;\n    const summary = gatherSummary();\n    client.send('summary', {\n      id,\n      summary\n    });\n  });\n  client.on('reload', () => {\n    window.location.reload();\n  });\n  client.on('hmr', payload => {\n    const {updates} = payload;\n    const hmr = createHMRHelper(payload);\n    const hmrModuleId = undefined;\n    if (hmrModuleId) {\n      const hmrModule = __fuse.r(hmrModuleId);\n      if (!hmrModule.default) throw new Error('An HMR plugin must export a default function');\n      hmrModule.default(payload, hmr);\n      return;\n    }\n    hmr.updateModules();\n    if (hmr.isStylesheeetUpdate) {\n      log(`Flushing ${updates.map(item => item.path)}`);\n      hmr.flushModules(updates);\n      log(`Calling modules ${updates.map(item => item.path)}`);\n      hmr.callModules(updates);\n    } else {\n      log(`Flushing all`);\n      hmr.flushAll();\n      log(`Calling entries all`);\n      hmr.callEntries();\n    }\n  });\n};\n"}